//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IWineAlertsClient {
    create(command: CreateWineAlertCommand): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class WineAlertsClient implements IWineAlertsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    create(command: CreateWineAlertCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/WineAlerts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IWineEvaluationClient {
    create(command: CreateWineEvaluationCommand): Observable<number>;
}

@Injectable({
    providedIn: 'root'
})
export class WineEvaluationClient implements IWineEvaluationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    create(command: CreateWineEvaluationCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/WineEvaluation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IWinesClient {
    search(command: SearchWineQuery): Observable<WinesVM>;
    create(command: CreateWineCommand): Observable<number>;
    get(id: number): Observable<WineDto>;
    getTodoItemsWithPagination(wineId: number | undefined, pageNumber: number | undefined, pageSize: number | undefined): Observable<PaginatedListOfWinePriceDto>;
}

@Injectable({
    providedIn: 'root'
})
export class WinesClient implements IWinesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    search(command: SearchWineQuery): Observable<WinesVM> {
        let url_ = this.baseUrl + "/api/Wines/search";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WinesVM>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WinesVM>;
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<WinesVM> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WinesVM.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    create(command: CreateWineCommand): Observable<number> {
        let url_ = this.baseUrl + "/api/Wines/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: number): Observable<WineDto> {
        let url_ = this.baseUrl + "/api/Wines/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WineDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WineDto>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<WineDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WineDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getTodoItemsWithPagination(wineId: number | undefined, pageNumber: number | undefined, pageSize: number | undefined): Observable<PaginatedListOfWinePriceDto> {
        let url_ = this.baseUrl + "/api/Wines/prices?";
        if (wineId === null)
            throw new Error("The parameter 'wineId' cannot be null.");
        else if (wineId !== undefined)
            url_ += "WineId=" + encodeURIComponent("" + wineId) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTodoItemsWithPagination(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTodoItemsWithPagination(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaginatedListOfWinePriceDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaginatedListOfWinePriceDto>;
        }));
    }

    protected processGetTodoItemsWithPagination(response: HttpResponseBase): Observable<PaginatedListOfWinePriceDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfWinePriceDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class CreateWineAlertCommand implements ICreateWineAlertCommand {
    year?: number | undefined;
    country!: string;
    wineType?: WineType | undefined;

    constructor(data?: ICreateWineAlertCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.country = _data["country"];
            this.wineType = _data["wineType"];
        }
    }

    static fromJS(data: any): CreateWineAlertCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateWineAlertCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["country"] = this.country;
        data["wineType"] = this.wineType;
        return data;
    }
}

export interface ICreateWineAlertCommand {
    year?: number | undefined;
    country: string;
    wineType?: WineType | undefined;
}

export enum WineType {
    Red = "Red",
    White = "White",
}

export class CreateWineEvaluationCommand implements ICreateWineEvaluationCommand {
    appearance?: number;
    aroma?: number;
    taste?: number;
    evaluation!: string;
    wineId?: number;

    constructor(data?: ICreateWineEvaluationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appearance = _data["appearance"];
            this.aroma = _data["aroma"];
            this.taste = _data["taste"];
            this.evaluation = _data["evaluation"];
            this.wineId = _data["wineId"];
        }
    }

    static fromJS(data: any): CreateWineEvaluationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateWineEvaluationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appearance"] = this.appearance;
        data["aroma"] = this.aroma;
        data["taste"] = this.taste;
        data["evaluation"] = this.evaluation;
        data["wineId"] = this.wineId;
        return data;
    }
}

export interface ICreateWineEvaluationCommand {
    appearance?: number;
    aroma?: number;
    taste?: number;
    evaluation: string;
    wineId?: number;
}

export class WinesVM implements IWinesVM {
    lists?: WineListItemDto[];

    constructor(data?: IWinesVM) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["lists"])) {
                this.lists = [] as any;
                for (let item of _data["lists"])
                    this.lists!.push(WineListItemDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WinesVM {
        data = typeof data === 'object' ? data : {};
        let result = new WinesVM();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.lists)) {
            data["lists"] = [];
            for (let item of this.lists)
                data["lists"].push(item.toJSON());
        }
        return data;
    }
}

export interface IWinesVM {
    lists?: WineListItemDto[];
}

export class WineListItemDto implements IWineListItemDto {
    name?: string;
    year?: number;
    region?: string;
    country?: string;
    description?: string;
    id?: number;
    type?: WineTypeDto;
    score?: number | undefined;
    aroma?: number | undefined;
    taste?: number | undefined;
    appearance?: number | undefined;
    price?: number | undefined;
    priceDate?: Date | undefined;
    commercialLink?: string;

    constructor(data?: IWineListItemDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.year = _data["year"];
            this.region = _data["region"];
            this.country = _data["country"];
            this.description = _data["description"];
            this.id = _data["id"];
            this.type = _data["type"];
            this.score = _data["score"];
            this.aroma = _data["aroma"];
            this.taste = _data["taste"];
            this.appearance = _data["appearance"];
            this.price = _data["price"];
            this.priceDate = _data["priceDate"] ? new Date(_data["priceDate"].toString()) : <any>undefined;
            this.commercialLink = _data["commercialLink"];
        }
    }

    static fromJS(data: any): WineListItemDto {
        data = typeof data === 'object' ? data : {};
        let result = new WineListItemDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["year"] = this.year;
        data["region"] = this.region;
        data["country"] = this.country;
        data["description"] = this.description;
        data["id"] = this.id;
        data["type"] = this.type;
        data["score"] = this.score;
        data["aroma"] = this.aroma;
        data["taste"] = this.taste;
        data["appearance"] = this.appearance;
        data["price"] = this.price;
        data["priceDate"] = this.priceDate ? this.priceDate.toISOString() : <any>undefined;
        data["commercialLink"] = this.commercialLink;
        return data;
    }
}

export interface IWineListItemDto {
    name?: string;
    year?: number;
    region?: string;
    country?: string;
    description?: string;
    id?: number;
    type?: WineTypeDto;
    score?: number | undefined;
    aroma?: number | undefined;
    taste?: number | undefined;
    appearance?: number | undefined;
    price?: number | undefined;
    priceDate?: Date | undefined;
    commercialLink?: string;
}

export enum WineTypeDto {
    Red = "Red",
    White = "White",
}

export class SearchWineQuery implements ISearchWineQuery {
    ids?: number[] | undefined;
    years?: number[] | undefined;
    countries?: string[] | undefined;
    regions?: string[] | undefined;
    type?: WineTypeDto | undefined;
    minPrice?: number | undefined;
    maxPrice?: number | undefined;

    constructor(data?: ISearchWineQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["ids"])) {
                this.ids = [] as any;
                for (let item of _data["ids"])
                    this.ids!.push(item);
            }
            if (Array.isArray(_data["years"])) {
                this.years = [] as any;
                for (let item of _data["years"])
                    this.years!.push(item);
            }
            if (Array.isArray(_data["countries"])) {
                this.countries = [] as any;
                for (let item of _data["countries"])
                    this.countries!.push(item);
            }
            if (Array.isArray(_data["regions"])) {
                this.regions = [] as any;
                for (let item of _data["regions"])
                    this.regions!.push(item);
            }
            this.type = _data["type"];
            this.minPrice = _data["minPrice"];
            this.maxPrice = _data["maxPrice"];
        }
    }

    static fromJS(data: any): SearchWineQuery {
        data = typeof data === 'object' ? data : {};
        let result = new SearchWineQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ids)) {
            data["ids"] = [];
            for (let item of this.ids)
                data["ids"].push(item);
        }
        if (Array.isArray(this.years)) {
            data["years"] = [];
            for (let item of this.years)
                data["years"].push(item);
        }
        if (Array.isArray(this.countries)) {
            data["countries"] = [];
            for (let item of this.countries)
                data["countries"].push(item);
        }
        if (Array.isArray(this.regions)) {
            data["regions"] = [];
            for (let item of this.regions)
                data["regions"].push(item);
        }
        data["type"] = this.type;
        data["minPrice"] = this.minPrice;
        data["maxPrice"] = this.maxPrice;
        return data;
    }
}

export interface ISearchWineQuery {
    ids?: number[] | undefined;
    years?: number[] | undefined;
    countries?: string[] | undefined;
    regions?: string[] | undefined;
    type?: WineTypeDto | undefined;
    minPrice?: number | undefined;
    maxPrice?: number | undefined;
}

export class CreateWineCommand implements ICreateWineCommand {
    name?: string;
    year?: number;
    region?: string;
    country?: string;
    description?: string;
    type?: WineType;

    constructor(data?: ICreateWineCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.year = _data["year"];
            this.region = _data["region"];
            this.country = _data["country"];
            this.description = _data["description"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): CreateWineCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateWineCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["year"] = this.year;
        data["region"] = this.region;
        data["country"] = this.country;
        data["description"] = this.description;
        data["type"] = this.type;
        return data;
    }
}

export interface ICreateWineCommand {
    name?: string;
    year?: number;
    region?: string;
    country?: string;
    description?: string;
    type?: WineType;
}

export class WineDto implements IWineDto {
    name?: string;
    year?: number;
    region?: string;
    country?: string;
    description?: string;
    id?: number;
    type?: WineTypeDto;
    evaluations?: WineEvaluationDto[];
    prices?: WinePriceDto[];

    constructor(data?: IWineDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.year = _data["year"];
            this.region = _data["region"];
            this.country = _data["country"];
            this.description = _data["description"];
            this.id = _data["id"];
            this.type = _data["type"];
            if (Array.isArray(_data["evaluations"])) {
                this.evaluations = [] as any;
                for (let item of _data["evaluations"])
                    this.evaluations!.push(WineEvaluationDto.fromJS(item));
            }
            if (Array.isArray(_data["prices"])) {
                this.prices = [] as any;
                for (let item of _data["prices"])
                    this.prices!.push(WinePriceDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WineDto {
        data = typeof data === 'object' ? data : {};
        let result = new WineDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["year"] = this.year;
        data["region"] = this.region;
        data["country"] = this.country;
        data["description"] = this.description;
        data["id"] = this.id;
        data["type"] = this.type;
        if (Array.isArray(this.evaluations)) {
            data["evaluations"] = [];
            for (let item of this.evaluations)
                data["evaluations"].push(item.toJSON());
        }
        if (Array.isArray(this.prices)) {
            data["prices"] = [];
            for (let item of this.prices)
                data["prices"].push(item.toJSON());
        }
        return data;
    }
}

export interface IWineDto {
    name?: string;
    year?: number;
    region?: string;
    country?: string;
    description?: string;
    id?: number;
    type?: WineTypeDto;
    evaluations?: WineEvaluationDto[];
    prices?: WinePriceDto[];
}

export class WineEvaluationDto implements IWineEvaluationDto {
    appearance?: number;
    aroma?: number;
    taste?: number;
    evaluation?: string;
    authorId?: string;

    constructor(data?: IWineEvaluationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appearance = _data["appearance"];
            this.aroma = _data["aroma"];
            this.taste = _data["taste"];
            this.evaluation = _data["evaluation"];
            this.authorId = _data["authorId"];
        }
    }

    static fromJS(data: any): WineEvaluationDto {
        data = typeof data === 'object' ? data : {};
        let result = new WineEvaluationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appearance"] = this.appearance;
        data["aroma"] = this.aroma;
        data["taste"] = this.taste;
        data["evaluation"] = this.evaluation;
        data["authorId"] = this.authorId;
        return data;
    }
}

export interface IWineEvaluationDto {
    appearance?: number;
    aroma?: number;
    taste?: number;
    evaluation?: string;
    authorId?: string;
}

export class WinePriceDto implements IWinePriceDto {
    price?: number;
    date?: Date;
    commercialLink?: string;

    constructor(data?: IWinePriceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.price = _data["price"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.commercialLink = _data["commercialLink"];
        }
    }

    static fromJS(data: any): WinePriceDto {
        data = typeof data === 'object' ? data : {};
        let result = new WinePriceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["price"] = this.price;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["commercialLink"] = this.commercialLink;
        return data;
    }
}

export interface IWinePriceDto {
    price?: number;
    date?: Date;
    commercialLink?: string;
}

export class PaginatedListOfWinePriceDto implements IPaginatedListOfWinePriceDto {
    items?: WinePriceDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfWinePriceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(WinePriceDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfWinePriceDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfWinePriceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfWinePriceDto {
    items?: WinePriceDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}